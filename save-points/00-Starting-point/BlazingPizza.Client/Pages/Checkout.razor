@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="main">
    <AuthorizeView Context="authContext">
        <NotAuthorized>
            <h2>Redirecting you...</h2>
        </NotAuthorized>
        <Authorized>
            <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
                <div class="checkout-cols">
                    <div class="checkout-order-details">
                        <h4>Review order</h4>
                        <OrderReview Order="@OrderState.Order"/>
                    </div>
                    <div class="checkout-delivery-address">
                        <h4>Deliver to...</h4>
                        <AddressEditor Address="@OrderState.Order.DeliveryAddress"/>
                    </div>
                </div>
                <button class="checkout-button btn btn-warning" type="submit">Place order</button>
                <DataAnnotationsValidator/>
            </EditForm>
        </Authorized>
    </AuthorizeView>
</div>

@code
{
    bool submitting = false;

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            await LocalStorage.SetAsync(JsRuntime, "currentorder", OrderState.Order);
            NavigationManager.NavigateTo("user/signin?redirectUri=/checkout", true);
        } else if (!OrderState.Order.Pizzas.Any())
        {
            var savedOrder = await LocalStorage.GetAsync<Order>(JsRuntime, "currentorder");
            if (savedOrder != null)
            {
                OrderState.ReplaceOrder(savedOrder);
                await LocalStorage.DeleteAsync(JsRuntime, "currentorder");
            }
            else
            {
                // There's nothing check out - go to home
                NavigationManager.NavigateTo("");
            }
        }
    }

    async Task PlaceOrder()
    {
        if (!submitting)
        {
            submitting = true;
            await Task.Delay(1000);
            var newOrderId = await HttpClient.PostJsonAsync<int>("orders", OrderState.Order);
            OrderState.ResetOrder();

            NavigationManager.NavigateTo($"myorders/{newOrderId}");
            submitting = false;
        }
    }

}