@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject IJSRuntime JsRuntime

<div class="main">
    <ul class="pizza-cards">
        @if (!(Specials is null))
        {
            @foreach (var special in Specials)
            {
                <PizzaSpecialCard Special="@special" OnPizzaSelection="@OrderState.ShowConfigureDialog"/>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemovePizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <a class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count == 0)" href="checkout">
            Order >
        </a>
    </div>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="@OrderState.ConfiguringPizza" OnCancel="@OrderState.CancelConfiguration" OnConfirm="@OrderState.ConfirmConfiguration"/>
}

@code
{
    List<PizzaSpecial> Specials { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Specials = await HttpClient.GetJsonAsync<List<PizzaSpecial>>("specials");
    }
    
    async Task RemovePizza(Pizza configuredPizza)
    {
        if (await JsRuntime.Confirm($"Remove {configuredPizza.Special.Name} pizza from the order?"))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }
}